
from dotenv import dotenv_values
import re
from aiogram import Bot, Dispatcher, F
from aiogram.types import (CallbackQuery, InlineKeyboardButton,
                           InlineKeyboardMarkup, InputMediaAudio,
                           InputMediaDocument, InputMediaPhoto,
                           InputMediaVideo, Message, FSInputFile)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters import CommandStart
from aiogram.filters.command import Command
from aiogram.exceptions import TelegramBadRequest
from aiogram.methods.send_photo import SendPhoto

import logging
import psycopg2
import datetime

is_remote = False  # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ë–î –ª–æ–∫–∞–ª—å–Ω–æ–π –∏–ª–∏ —É–¥–∞–ª—ë–Ω–Ω–æ–π
config = dotenv_values(".env.remote") if is_remote else dotenv_values(".env")

token = config['TG_TOKEN']
host, user, password, database = config['HOST'], config['USER'], config['PASSWORD'], config['DATABASE']

bot = Bot(token=token)  # AVP TEST
dp = Dispatcher()

logging.basicConfig(filename='errors.log', level=logging.ERROR,  # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
amount_songs = 373

@dp.message(CommandStart())  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def welcome(message: Message):
    try:
        await message.answer(text='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –û—Ç–ø—Ä–∞–≤—å –±–æ—Ç—É –Ω–æ–º–µ—Ä –ø–µ—Å–Ω–∏ –∏–ª–∏ —Ñ—Ä–∞–∑—É –∏–∑ –ø–µ—Å–Ω–∏. –¢–∞–∫–∂–µ –Ω–∞–π—Ç–∏ –ø–µ—Å–Ω—é '
                                  '–º–æ–∂–Ω–æ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –∏–ª–∏ –ø–æ –∞–≤—Ç–æ—Ä—É! –ê –µ—â—ë, –≤—ã–±—Ä–∞–≤ –ø—É–Ω–∫—Ç –ú–ï–ù–Æ, —Ç—ã —Å–º–æ–∂–µ—à—å '
                                  '—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–µ—Å–µ–Ω –ø–æ –Ω–µ–∫–æ—Ç–æ—Ä—ã–º –∞–≤—Ç–æ—Ä–∞–º –∏–ª–∏ –ø–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é.')
        metrics('users', message)
    except Exception as e:
        logging.exception(e)


@dp.message()  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def search_song(message: Message):
    search_text = message.text.strip().lower()
    if search_text == 'users' and message.chat.id == 597856040:
        info = get_info(search_text)
        await message.answer(info)
    elif search_text in ('/c1', '/c2', '/c3', '/sgm', '/gt', '/tr', '/hill', '/kk'):
        content = get_contents(search_text)
        if type(content) is list:
            for elem in content:
                await message.answer(elem)
        else:
            await message.answer(content)
        metrics('cnt_by_content', message)
    elif search_text.isdigit():  # –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
        result = search_song_by_num(search_text)  # –ò—â–µ–º –ø–µ—Å–Ω—é –ø–æ –Ω–æ–º–µ—Ä—É
        if int(search_text) <= amount_songs:
            global num_song
            num_song = int(search_text)
            chords_butt = InlineKeyboardButton(text='–ê–∫–∫–æ—Ä–¥—ã', callback_data='Chords')
            keyword = InlineKeyboardMarkup(inline_keyboard=[[chords_butt]])
            await message.answer(result, reply_markup=keyword)
        else:
            await message.answer(text=result, show_alert=True)
        metrics('cnt_by_nums', message)
    else:
        if len(search_text) < 4:
            await message.answer('–ó–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±–æ–ª–µ–µ 3 —Å–∏–º–≤–æ–ª–æ–≤.')
        else:
            result = search_song_by_text(search_text)  # –ò—â–µ–º –ø–µ—Å–Ω—é –ø–æ —Ç–µ–∫—Å—Ç—É
            await message.answer(result)
        metrics('cnt_by_txt', message)
    metrics('users', message)


@dp.callback_query(F.data == 'Chords')  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ê–∫–∫–æ—Ä–¥—ã"
async def on_click_chords(callback: CallbackQuery):
    try:
        file = FSInputFile(f'Chords_jpg/{num_song}.jpg')
        await bot.send_photo(chat_id=callback.message.chat.id, photo=file)
        metrics('cnt_by_chords', callback.message)
    except Exception as e:
        logging.exception(e)


# @dp.message()  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
# async def handle_all_messages(message):
#     while True:
#         try:
#             search_song(message)
#             break
#         except Exception as e:
#             logging.exception(e)


def get_contents(c):  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤ –ø–µ—Å–µ–Ω
    try:
        conn = psycopg2.connect(host=host, user=user, password=password, dbname=database)
        cursor = conn.cursor()
        if c == '/c1':
            cursor.execute("SELECT num, name FROM songs WHERE num < 150 ORDER BY num")
        elif c == '/c2':
            cursor.execute("SELECT num, name FROM songs WHERE num BETWEEN 151 and 290 ORDER BY num")
        elif c == '/c3':
            cursor.execute("SELECT num, name FROM songs WHERE num > 290 ORDER BY num")
        # elif c == '/ch':
        #     cursor.execute("SELECT num, name, alt_name, en_name FROM songs WHERE num = ANY(string_to_array(("
        #                    "SELECT song_nums FROM themes WHERE theme = '–†–æ–∂–¥–µ—Å—Ç–≤–æ –•—Ä–∏—Å—Ç–∞'), ', ')::int[]) ORDER BY num")
        elif c == '/sgm':
            cursor.execute("SELECT num, name, alt_name, en_name FROM songs "
                           "WHERE authors ILIKE '%Sovereign Grace Music%' ORDER BY num")
        elif c == '/gt':
            cursor.execute("SELECT num, name, alt_name, en_name FROM songs WHERE authors ILIKE '%Getty%' "
                           "OR authors LIKE '%Townend%' OR authors LIKE '%CityAlight%' ORDER BY num")
        elif c == '/tr':
            cursor.execute("SELECT num, name, alt_name, en_name FROM songs "
                           "WHERE authors ILIKE '%Tomlin%' OR authors LIKE '%Redman%' ORDER BY num")
        elif c == '/hill':
            cursor.execute("SELECT num, name, alt_name, en_name FROM songs "
                           "WHERE authors ILIKE '%Hillsong%' ORDER BY num")
        elif c == '/kk':
            cursor.execute("SELECT num, name, alt_name, en_name FROM songs "
                           "WHERE authors ILIKE '%–ö—Ä–∞–µ—É–≥–æ–ª—å–Ω—ã–π –ö–∞–º–µ–Ω—å%' ORDER BY num")
        result = cursor.fetchall()
        cursor.close()
        conn.close()
        song_list = ''
        if c in ('/c1', '/c2', '/c3'):
            for song in result:
                song_list += f'{song[0]} - {song[1]}\n'
        elif c == '/sgm':  # –†–∞–∑–±–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ SGM –Ω–∞ –¥–≤–∞.
            song_list = ['', '']
            for i in range(52):
                song_list[0] += (str(result[i][0]) + ' - ' + result[i][1] + ("" if not result[i][2] else
                    f'\n        ({result[i][2]})') + ("" if not result[i][3] else f'\n        ({result[i][3]})') + '\n')
            for i in range(52, len(result)):
                song_list[1] += (str(result[i][0]) + ' - ' + result[i][1] + ("" if not result[i][2] else
                    f'\n        ({result[i][2]})') + ("" if not result[i][3] else f'\n        ({result[i][3]})') + '\n')
        else:
            for song in result:
                song_list += (str(song[0]) + ' - ' + song[1] + ("" if not song[2] else f'\n        ({song[2]})') +
                              ("" if not song[3] else f'\n        ({song[3]})') + '\n')
        return song_list
    except Exception as e:
        logging.exception(e)


def search_song_by_num(song_num):  # –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –ø–µ—Å–Ω–∏ –ø–æ –Ω–æ–º–µ—Ä—É
    try:
        conn = psycopg2.connect(host=host, user=user, password=password, dbname=database)
        cursor = conn.cursor()
        cursor.execute(f"UPDATE songs SET cnt_using = COALESCE(cnt_using, 0) + 1 WHERE num = {song_num} "
                       f"RETURNING text, en_name, authors")
        # cursor.execute(f"UPDATE songs SET cnt_using = cnt_using + 1 WHERE num = {song_num}")
        # cursor.execute(f'SELECT text, en_name, authors FROM songs WHERE num = {song_num}')
        result = cursor.fetchone()
        conn.commit()
        cursor.close()
        conn.close()
        sep = '___________________________________'
        if result:
            return f'{result[0]}\n{sep}\n{result[1] if result[1] else ""}\n{result[2] if result[2] else ""}'
        else:
            return (f'–ü–µ—Å–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. ü§∑\n–ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ—Ç—É –Ω–æ–º–µ—Ä –ø–µ—Å–Ω–∏ (1-{amount_songs}) –∏–ª–∏ —Ñ—Ä–∞–∑—É –∏–∑ –ø–µ—Å–Ω–∏. '
                    f'–¢–∞–∫–∂–µ –Ω–∞–π—Ç–∏ –ø–µ—Å–Ω—é –º–æ–∂–Ω–æ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –∏–ª–∏ –ø–æ –∞–≤—Ç–æ—Ä—É!')
    except Exception as e:
        print(e)
        logging.exception(e)


def search_song_by_text(search_text):  # –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –ø–µ—Å–Ω–∏ –ø–æ —Ñ—Ä–∞–∑–µ
    try:
        new_txt = '%'.join(re.sub(r'[^\w\s]', '', re.sub(r'—ë', '–µ', search_text)).split())
        conn = psycopg2.connect(host=host, user=user, password=password, dbname=database)
        cursor = conn.cursor()
        cursor.execute(f"SELECT num, name, alt_name, en_name FROM songs WHERE REPLACE(text, '—ë', '–µ') "
                       f"ILIKE '%{new_txt}%' OR REPLACE(alt_name, '—ë', '–µ') ILIKE '%{new_txt}%' "
                       f"OR en_name ILIKE '%{new_txt}%' OR authors ILIKE '%{new_txt}%'")
        result = cursor.fetchall()
        cursor.close()
        conn.close()
        song_list = ''
        for song in result:
            song_list += (str(song[0]) + ' - ' + song[1] + ("" if not song[2] else f'\n        ({song[2]})') +
                          ("" if not song[3] else f'\n        ({song[3]})') + '\n')
        return song_list[:4088] + '...\n...' if len(song_list) > 4094 else song_list
    except Exception as e:
        logging.exception(e)


def get_info(my_query):
    try:
        conn = psycopg2.connect(host=host, user=user, password=password, dbname=database)
        cursor = conn.cursor()
        current_date = datetime.date.today()
        cursor.execute(f"SELECT (SELECT COUNT( *) FROM users) AS a, (SELECT COUNT( *) FROM users "
                       f"WHERE last_access >= current_date) AS b, (SELECT COUNT(u.*) FROM users u JOIN periods p "
                       f"ON p.id = '{str(current_date)[:7]}' WHERE u.last_access BETWEEN p.dt_beg AND p.dt_end) AS c, "
                       f"(SELECT SUM(cnt_by_content + cnt_by_nums + cnt_by_txt + cnt_by_chords + cnt_by_audio_ru + "
                       f"cnt_by_media_en) FROM metrics) AS d")
        res = cursor.fetchone()
        cursor.close()
        conn.close()
        result = f'users: {res[0]} \nusers today: {res[1]} \nusers month: {res[2]} \nqueries: {res[3]}'
        return result
    except Exception as e:
        logging.exception(e)


def metrics(act, message):  # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
    try:
        user_id, f_name, l_name, username, lang = (message.chat.id, message.from_user.first_name,
                            message.from_user.last_name, message.from_user.username, message.from_user.language_code)
        current_date = datetime.date.today()  # .isoformat()
        conn = psycopg2.connect(host=host, user=user, password=password, dbname=database)
        cursor = conn.cursor()
        if act == 'users':  # –ó–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ç–∞–±–ª–∏—Ü—É users
            cursor.execute(f"INSERT INTO users (telgrm_user_id, f_name, l_name, username, lang) VALUES ({user_id}, "
                           f"'{f_name}', '{l_name}', '{username}', '{lang}') ON CONFLICT (telgrm_user_id) DO UPDATE "
                        f"SET u_cnt_msg = users.u_cnt_msg + 1, last_access = current_timestamp(0) + INTERVAL '1 hours'")
        else:  # –ó–∞–ø–∏—Å—å –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –≤ —Ç–∞–±–ª–∏—Ü—É metrics
            cursor.execute(f"SELECT p.id, m.id_period FROM periods p LEFT JOIN metrics m ON p.id = m.id_period "
                           f"WHERE current_date BETWEEN p.dt_beg and p.dt_end")
            id_period = cursor.fetchone()
            if not id_period[1]:  # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –≤ metrics –µ—â—ë –Ω–µ—Ç, —Ç–æ...
                id_prev_period = str(datetime.date(current_date.year, current_date.month - 1, 1))[:7] \
                    if current_date.month > 1 else str(datetime.date(current_date.year - 1, 12, 1))[:7]
                cursor.execute(f"UPDATE metrics SET cnt_by_users = (SELECT COUNT(u.*) FROM users u JOIN periods p "
                               f"ON p.id = '{id_prev_period}' WHERE u.last_access BETWEEN p.dt_beg AND p.dt_end) "
                               f"WHERE id_period = '{id_prev_period}'")  # –ó–∞–ø–∏—Å—å –∫–æ–ª-–≤–∞ —é–∑–µ—Ä–æ–≤ –≤ –ø—Ä–æ—à–ª–æ–º –º–µ—Å—è—Ü–µ –≤ metrics
                cursor.execute(f"INSERT INTO metrics (id_period) VALUES ('{id_period[0]}')")  # –ó–∞–ø–∏—Å—å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ metrics
            if act == 'cnt_by_content':  # –°—á—ë—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è
                cursor.execute(f"UPDATE metrics SET cnt_by_content=cnt_by_content+1 WHERE id_period = '{id_period[0]}'")
            elif act == 'cnt_by_nums':  # –°—á—ë—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–æ–º–µ—Ä–∞–º
                cursor.execute(f"UPDATE metrics SET cnt_by_nums = cnt_by_nums + 1 WHERE id_period = '{id_period[0]}'")
            elif act == 'cnt_by_txt':  # –°—á—ë—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –ø–æ —Ñ—Ä–∞–∑–µ
                cursor.execute(f"UPDATE metrics SET cnt_by_txt = cnt_by_txt + 1 WHERE id_period = '{id_period[0]}'")
            elif act == 'cnt_by_chords':  # –°—á—ë—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è "–ê–∫–∫–æ—Ä–¥—ã"
                cursor.execute(f"UPDATE metrics SET cnt_by_chords = cnt_by_chords + 1 WHERE id_period = '{id_period[0]}'")
                cursor.execute(f"UPDATE users SET u_cnt_chords = u_cnt_chords + 1, "
                            f"last_access = current_timestamp(0) + INTERVAL '1 hours' WHERE telgrm_user_id = {user_id}")
        conn.commit()
        cursor.close()
        conn.close()
    except Exception as e:
        logging.exception(e)


if __name__ == '__main__':  # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    try:
        dp.run_polling(bot)
    except Exception as e:
        logging.exception(e)
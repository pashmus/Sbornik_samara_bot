from dotenv import dotenv_values
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import (CallbackQuery, InlineKeyboardButton,
                           InlineKeyboardMarkup, InputMediaAudio,
                           InputMediaDocument, InputMediaPhoto,
                           InputMediaVideo, Message, FSInputFile)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters import CommandStart
from aiogram.filters.command import Command
from aiogram.exceptions import TelegramBadRequest
from aiogram.methods.send_photo import SendPhoto
import logging
import psycopg2
import datetime
from aiogram.enums import ParseMode
from math import ceil

is_remote = False  # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ë–î –ª–æ–∫–∞–ª—å–Ω–æ–π –∏–ª–∏ —É–¥–∞–ª—ë–Ω–Ω–æ–π
config = dotenv_values(".env.remote") if is_remote else dotenv_values(".env")

token = config['TG_TOKEN']
host, user, password, database = config['HOST'], config['USER'], config['PASSWORD'], config['DATABASE']

bot = Bot(token=token)
dp = Dispatcher()

logging.basicConfig(filename='errors.log', level=logging.ERROR,
                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')  # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
amount_songs = 376


@dp.message(CommandStart())  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def welcome(message: Message):
    try:
        await message.answer(text='<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n–û—Ç–ø—Ä–∞–≤—å –±–æ—Ç—É –Ω–æ–º–µ—Ä –ø–µ—Å–Ω–∏ –∏–ª–∏ —Ñ—Ä–∞–∑—É –∏–∑ –ø–µ—Å–Ω–∏. –¢–∞–∫–∂–µ –Ω–∞–π—Ç–∏ '
                            '–ø–µ—Å–Ω—é –º–æ–∂–Ω–æ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –∏–ª–∏ –ø–æ –∞–≤—Ç–æ—Ä—É!\n–ê –µ—â—ë, –≤—ã–±—Ä–∞–≤ –ø—É–Ω–∫—Ç <b>–ú–µ–Ω—é</b>, '
                            '–º–æ–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –ø–µ—Å–µ–Ω –ø–æ –Ω–µ–∫–æ—Ç–æ—Ä—ã–º –∞–≤—Ç–æ—Ä–∞–º, –ø–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é –∏–ª–∏ "‚ù§Ô∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ".',
                             parse_mode=ParseMode.HTML)
        metrics('users', message.from_user)
    except Exception as e:
        logging.exception(e)


@dp.message(((F.text.strip().lower() == 'admin') | (F.text.lower().startswith('select'))) &
            (F.from_user.id == int(config['my_tlgrm_id'])))
async def get_users_info(message: Message):
    try:
        conn = psycopg2.connect(host=host, user=user, password=password, dbname=database)
        cursor = conn.cursor()
        if message.text.strip().lower() == 'admin':
            cursor.execute(f"SELECT (SELECT COUNT( *) FROM users) AS a, (SELECT COUNT( *) FROM users "
                           f"WHERE last_access >= current_date) AS b, (SELECT COUNT(u.*) FROM users u JOIN periods p "
                           f"ON p.id = TO_CHAR(current_date, 'YYYY-MM') WHERE u.last_access "
                           f"BETWEEN p.dt_beg AND p.dt_end) AS c, (SELECT SUM(cnt_by_content + cnt_by_nums + "
                           f"cnt_by_txt + cnt_by_chords + cnt_by_audio_ru + cnt_by_media_en) FROM metrics) AS d")
            res = cursor.fetchone()
            await message.answer(f'users: {res[0]} \nusers today: {res[1]} \nusers month: {res[2]} \nqueries: {res[3]}')
        else:
            cursor.execute(f"{message.text}")
            my_select = cursor.fetchall()
            output = '\n'.join(str(elem) for elem in my_select)
            await message.answer(output)
        cursor.close()
        conn.close()
    except Exception as e:
        await message.answer(str(e))


@dp.message(F.text.in_({'/c1', '/c2', '/c3', '/c4', '/sgm', '/gt', '/tr', '/hill', '/kk', '/fvrt'}))
async def get_contents(message: Message):  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤ –ø–µ—Å–µ–Ω
    try:
        c = message.text
        conn = psycopg2.connect(host=host, user=user, password=password, dbname=database)
        cursor = conn.cursor()
        if c == '/c1':
            cursor.execute("SELECT num, name, alt_name, en_name FROM songs WHERE num < 101 ORDER BY num")
        elif c == '/c2':
            cursor.execute("SELECT num, name, alt_name, en_name FROM songs WHERE num BETWEEN 101 and 200 ORDER BY num")
        elif c == '/c3':
            cursor.execute("SELECT num, name, alt_name, en_name FROM songs WHERE num BETWEEN 201 and 300 ORDER BY num")
        elif c == '/c4':
            cursor.execute("SELECT num, name, alt_name, en_name FROM songs WHERE num > 300 ORDER BY num")
        # elif c == '/ch':
        #     cursor.execute("SELECT num, name, alt_name, en_name FROM songs WHERE num = ANY(string_to_array(("
        #                    "SELECT song_nums FROM themes WHERE theme = '–†–æ–∂–¥–µ—Å—Ç–≤–æ –•—Ä–∏—Å—Ç–∞'), ', ')::int[]) ORDER BY num")
        elif c == '/sgm':
            cursor.execute("SELECT num, name, alt_name, en_name FROM songs "
                           "WHERE authors ILIKE '%Sovereign Grace Music%' ORDER BY num")
        elif c == '/gt':
            cursor.execute("SELECT num, name, alt_name, en_name FROM songs WHERE authors ILIKE '%Getty%' "
                           "OR authors LIKE '%Townend%' OR authors LIKE '%CityAlight%' ORDER BY num")
        elif c == '/tr':
            cursor.execute("SELECT num, name, alt_name, en_name FROM songs "
                           "WHERE authors ILIKE '%Tomlin%' OR authors LIKE '%Redman%' ORDER BY num")
        elif c == '/hill':
            cursor.execute("SELECT num, name, alt_name, en_name FROM songs "
                           "WHERE authors ILIKE '%Hillsong%' ORDER BY num")
        elif c == '/kk':
            cursor.execute("SELECT num, name, alt_name, en_name FROM songs "
                           "WHERE authors ILIKE '%–ö—Ä–∞–µ—É–≥–æ–ª—å–Ω—ã–π –ö–∞–º–µ–Ω—å%' ORDER BY num")
        elif c == '/fvrt':
            cursor.execute(f"SELECT s.num, s.name, s.alt_name, s.en_name FROM user_song_link usl "
                           f"JOIN songs s ON usl.song_num = s.num WHERE usl.tg_user_id  = {message.from_user.id}")
        res = cursor.fetchall()
        num_of_songs = len(res)
        cursor.close()
        conn.close()
        content = ['', '']
        for i in range(50 if num_of_songs > 50 else num_of_songs):
            content[0] += (f"\n{str(res[i][0])} - {res[i][1]}" + ("" if not res[i][2] else
                           f'\n        ({res[i][2]})') + ("" if not res[i][3] else f'\n        ({res[i][3]})'))
        for i in range(50, num_of_songs):
            content[1] += (f"\n{str(res[i][0])} - {res[i][1]}" + ("" if not res[i][2] else
                           f'\n        ({res[i][2]})') + ("" if not res[i][3] else f'\n        ({res[i][3]})'))
        if c in ('/gt', '/tr', '/hill', '/kk') or (c == '/fvrt' and num_of_songs < 25):
            btn_nums = {f"song_lst;{num[0]}": str(num[0]) for num in res}
            width = (8 if ceil(num_of_songs/8) < ceil(num_of_songs/7)
                     else 7 if ceil(num_of_songs/7) < ceil(num_of_songs/6) else 6)
            kb = create_inline_kb(width, **btn_nums)  # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å—Ç—Ä–æ–∏—Ç–µ–ª—è –∫–Ω–æ–ø–æ–∫
            await message.answer(text=content[0], reply_markup=kb)
        else:
            for elem in content:
                if elem:
                    await message.answer(elem)
        metrics('cnt_by_content' if c.startswith('/c') else 'cnt_by_fvrt' if c == '/fvrt' else 'cnt_by_singers',
                message.from_user)
        metrics('users', message.from_user)
    except Exception as e:
        logging.exception(e)


@dp.message(F.text == '/thm')  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–∫–∞–∑–∞—Ç–µ–ª—è
async def get_main_themes(message: Message):
    try:
        kb = create_inline_kb(1, **get_themes_btns('main_themes'))  # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å—Ç—Ä–æ–∏—Ç–µ–ª—è –∫–Ω–æ–ø–æ–∫ –ö–∞—Ç–µ–≥–æ—Ä–∏–π
        await message.answer(text=f"üóÇ <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é</b>", parse_mode=ParseMode.HTML, reply_markup=kb)
    except Exception as e:
        logging.exception(e)


@dp.callback_query(F.data.startswith('&;'))  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –ö–∞—Ç–µ–≥–æ—Ä–∏—é. data = f"&;{m_theme_id};{m_theme}"
async def on_click_main_theme(callback: CallbackQuery):
    try:
        kb = create_inline_kb(width=1, back_btn='to_main_themes', **get_themes_btns(callback.data))  # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å—Ç—Ä–æ–∏—Ç–µ–ª—è –∫–Ω–æ–ø–æ–∫
        await callback.message.edit_text(text=f'üî∏ –ö–∞—Ç–µ–≥–æ—Ä–∏—è <b>"{callback.data.split(";")[2]}":</b>',
                                         parse_mode=ParseMode.HTML, reply_markup=kb)
    except Exception as e:
        logging.exception(e)


@dp.callback_query(F.data.startswith('to_main_themes') | F.data.startswith('%;'))  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —Ç–µ–º—É –∏–ª–∏ –ù–∞–∑–∞–¥
async def on_click_theme_or_back(callback: CallbackQuery):
    try:
        if callback.data == 'to_main_themes':
            kb = create_inline_kb(1, **get_themes_btns('main_themes'))  # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å—Ç—Ä–æ–∏—Ç–µ–ª—è –∫–Ω–æ–ø–æ–∫ –ö–∞—Ç–µ–≥–æ—Ä–∏–π
            await callback.message.edit_text(text=f"üóÇ <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é</b>", parse_mode=ParseMode.HTML,
                                             reply_markup=kb)
        else:
            m_theme = callback.message.text.split('"')[1]
            m_theme_id, theme_id = callback.data.split(';')[1], callback.data.split(';')[2]
            conn = psycopg2.connect(host=host, user=user, password=password, dbname=database)
            cursor = conn.cursor()
            cursor.execute(f"SELECT s.num, s.name, s.alt_name, s.en_name FROM songs s JOIN theme_song_link tsl "
                           f"ON s.num = tsl.song_num WHERE tsl.theme_id = {int(theme_id)}")
            res = cursor.fetchall()
            num_of_songs = len(res)
            content = f"üîπ <b>{callback.data.split(';')[3]}:</b>\n"
            btn_nums = {}
            if num_of_songs < 25:
                for song in res:
                    content += (f"\n{str(song[0])} - {song[1]}" + ("" if not song[2] else
                                f"\n        ({song[2]})") + ("" if not song[3] else f"\n        ({song[3]})"))
                    btn_nums[f"song_lst;{song[0]}"] = str(song[0])
                width = (8 if ceil(num_of_songs / 8) < ceil(num_of_songs / 7)
                         else 7 if ceil(num_of_songs / 7) < ceil(num_of_songs / 6) else 6)
                kb = create_inline_kb(width=width, back_btn=f"song_lst;to_themes;{m_theme_id};{m_theme}", **btn_nums)  # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å—Ç—Ä–æ–∏—Ç–µ–ª—è –∫–Ω–æ–ø–æ–∫
            else:
                for elem in res:
                    content += (f"\n{str(elem[0])} - {elem[1]}" + ("" if not elem[2] else
                                f'\n        ({elem[2]})') + ("" if not elem[3] else f'\n        ({elem[3]})'))
                kb = create_inline_kb(width=1, back_btn=f"song_lst;to_themes;{m_theme_id};{m_theme}")  # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å—Ç—Ä–æ–∏—Ç–µ–ª—è –∫–Ω–æ–ø–æ–∫
            await callback.message.edit_text(text=content, parse_mode=ParseMode.HTML, reply_markup=kb)
            cursor.close()
            conn.close()
        metrics('cnt_by_themes', callback.from_user)
        metrics('users', callback.from_user)
    except Exception as e:
        logging.exception(e)


@dp.callback_query(F.data.startswith('song_lst'))  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –Ω–æ–º–µ—Ä–æ–º –ø–µ—Å–Ω–∏
async def on_click_song_or_back(callback: CallbackQuery):
    try:
        num = callback.data.split(';')[1]
        if num == 'to_themes':
            kb = create_inline_kb(1, back_btn='to_main_themes', **get_themes_btns(f"&;{callback.data.split(';')[2]}"))  # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å—Ç—Ä–æ–∏—Ç–µ–ª—è –∫–Ω–æ–ø–æ–∫
            await callback.message.edit_text(text=f'üî∏ –ö–∞—Ç–µ–≥–æ—Ä–∏—è <b>"{callback.data.split(";")[3]}":</b>',
                                             parse_mode=ParseMode.HTML, reply_markup=kb)
        else:
            result = await return_song(num, callback.from_user.id)
            await bot.send_message(chat_id=callback.message.chat.id, text=result[1], parse_mode=ParseMode.HTML,
                                   reply_markup=result[2])
            await callback.answer()
        metrics('cnt_by_nums', callback.from_user)
        metrics('users', callback.from_user)
    except Exception as e:
        logging.exception(e)


@dp.message(F.text.isdigit())  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –ø–µ—Å–Ω–∏
async def search_song_by_num(message: Message):
    try:
        num = message.text
        result = await return_song(num, message.from_user.id)  # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∏—Å–∫–∞ –ø–µ—Å–Ω–∏
        if result[0]:
            await message.answer(result[1], parse_mode=ParseMode.HTML, reply_markup=result[2])
        else:
            await message.answer(result[1])
        metrics('cnt_by_nums', message.from_user)
        metrics('users', message.from_user)
    except Exception as e:
        logging.exception(e)


async def return_song(num, tg_user_id):
    try:
        conn = psycopg2.connect(host=host, user=user, password=password, dbname=database)
        cursor = conn.cursor()
        cursor.execute(f"WITH upd_song AS (UPDATE songs SET cnt_using = COALESCE(cnt_using, 0) + 1 WHERE num = {num} "
                       f"RETURNING num, alt_name, text, en_name, authors, chords_file_id, audio_file_id, "
                       f"youtube_url) SELECT upd_song.*, EXISTS(SELECT 1 FROM user_song_link "
                       f"WHERE tg_user_id = {tg_user_id} AND song_num = {num}) FROM upd_song")
        res = cursor.fetchone()
        conn.commit()
        cursor.close()
        conn.close()
        sep = '____________________________'
        if res:
            kb = under_song_kb(2, res[8], res[6] is not None, res[7] is not None)  # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∫–ª–∞–≤—ã –ø–æ–¥ –ø–µ—Å–Ω–µ–π
            return [True, (f'<i>{res[0]}</i>' + (f'  <b>{res[1]}</b>\n\n' if res[1] else '\n\n') +
                           f'{res[2]}\n{sep}' + (f'\n<b>{res[3]}</b>' if res[3] else '') +
                           (f'\n<i>{res[4]}</i>' if res[4] else '')), kb]
        else:
            return [False, (f'–ü–µ—Å–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. ü§∑\n–ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ—Ç—É –Ω–æ–º–µ—Ä –ø–µ—Å–Ω–∏ (1-{amount_songs}) –∏–ª–∏ '
                            f'—Ñ—Ä–∞–∑—É –∏–∑ –ø–µ—Å–Ω–∏. –¢–∞–∫–∂–µ –Ω–∞–π—Ç–∏ –ø–µ—Å–Ω—é –º–æ–∂–Ω–æ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –∏–ª–∏ –ø–æ –∞–≤—Ç–æ—Ä—É!')]
    except Exception as e:
        logging.exception(e)


@dp.callback_query(F.data == 'favorites')  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ 'ü§ç'
async def on_click_favorites(callback: CallbackQuery):
    try:
        kb: InlineKeyboardMarkup = callback.message.reply_markup  # –î–æ—Å—Ç–∞—ë–º –æ–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        song_in_fvrt: bool = kb.inline_keyboard[0][0].text == '‚ù§Ô∏è'  # –ï—Å—Ç—å –ª–∏ –ø–µ—Å–Ω—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
        kb.inline_keyboard[0][0].text = 'ü§ç' if song_in_fvrt else '‚ù§Ô∏è'  # –ú–µ–Ω—è–µ–º —Ü–≤–µ—Ç —Å–µ—Ä–¥—Ü–∞ –Ω–∞ –∫–Ω–æ–ø–∫–µ
        tg_user_id = callback.from_user.id
        num = callback.message.text.split()[0]
        conn = psycopg2.connect(host=host, user=user, password=password, dbname=database)
        cursor = conn.cursor()
        cursor.execute(f"SELECT * FROM user_song_link WHERE tg_user_id={tg_user_id}")
        user_in_fvrt = cursor.fetchone()
        if song_in_fvrt:
            cursor.execute(f"DELETE FROM user_song_link WHERE tg_user_id = {tg_user_id} AND song_num = {num}")
        else:
            cursor.execute(f"INSERT INTO user_song_link VALUES ({tg_user_id}, {num})")
        conn.commit()
        cursor.close()
        conn.close()
        if song_in_fvrt:
            await callback.answer(text='–ü–µ—Å–Ω—è —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –ò–∑–±—Ä–∞–Ω–Ω–æ–≥–æ!')
        else:
            if user_in_fvrt:
                await callback.answer(text='–ü–µ—Å–Ω—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ò–∑–±—Ä–∞–Ω–Ω–æ–µ!')
            else:
                await callback.answer(text='–ü–µ—Å–Ω—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ò–∑–±—Ä–∞–Ω–Ω–æ–µ!\n'
                                           '–í–µ—Å—å —Å–ø–∏—Å–æ–∫ —Å –ò–∑–±—Ä–∞–Ω–Ω—ã–º –º–æ–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ —á–µ—Ä–µ–∑ –ú–µ–Ω—é.', show_alert=True)
        await callback.message.edit_reply_markup(reply_markup=kb)
    except Exception as e:
        logging.exception(e)


@dp.callback_query(F.data == 'Chords')  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ê–∫–∫–æ—Ä–¥—ã"
async def on_click_chords(callback: CallbackQuery):
    try:
        num = callback.message.text.split()[0]
        conn = psycopg2.connect(host=host, user=user, password=password, dbname=database)
        cursor = conn.cursor()
        cursor.execute(f"SELECT chords_file_id FROM songs where num = {num}")
        chords_file_id = cursor.fetchone()[0]
        if chords_file_id:
            await bot.send_photo(chat_id=callback.message.chat.id, photo=chords_file_id, caption=num)
        else:
            file = FSInputFile(f'Chords_jpg/{num}.jpg')
            photo_info = await bot.send_photo(chat_id=callback.message.chat.id, photo=file, caption=num)
            file_id = photo_info.photo[-1].file_id
            cursor.execute(f"UPDATE songs SET chords_file_id = '{file_id}' WHERE num = {num}")
            conn.commit()
        cursor.close()
        conn.close()
        metrics('cnt_by_chords', callback.from_user)
        await callback.answer()
    except Exception as e:
        logging.exception(e)


@dp.message(F.text)  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –ø–æ —Ñ—Ä–∞–∑–µ
async def search_song_by_text(message: Message):
    try:
        conn = psycopg2.connect(host=host, user=user, password=password, dbname=database)
        cursor = conn.cursor()
        cursor.execute(f"SELECT num, name, alt_name, en_name FROM songs WHERE REPLACE(name || ' ' || "
                       f"COALESCE(alt_name, '') || ' ' || text || ' ' || COALESCE(en_name, '') || ' ' || "
                       f"COALESCE(authors, ''), '—ë', '–µ') @@ PHRASETO_TSQUERY(REPLACE('{message.text}', '—ë', '–µ')) "
                       f"ORDER BY num")
        res = cursor.fetchall()
        num_of_songs = len(res) if len(res) < 25 else 24
        cursor.close()
        conn.close()
        song_list = '' if res else ('–ü–µ—Å–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. ü§∑ \n–û—Ç–ø—Ä–∞–≤—å –±–æ—Ç—É –Ω–æ–º–µ—Ä –ø–µ—Å–Ω–∏ –∏–ª–∏ —Ñ—Ä–∞–∑—É –∏–∑ –ø–µ—Å–Ω–∏. '
                                    '–¢–∞–∫–∂–µ –Ω–∞–π—Ç–∏ –ø–µ—Å–Ω—é –º–æ–∂–Ω–æ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –∏–ª–∏ –ø–æ –∞–≤—Ç–æ—Ä—É!')
        for song in res[0:24]:
            song_list += (f"\n{str(song[0])} - {song[1]}" + ("" if not song[2] else f"\n        ({song[2]})") +
                          ("" if not song[3] else f"\n        ({song[3]})"))
        btn_nums = {f"song_lst;{num[0]}": str(num[0]) for num in res[0:24]}
        width = (8 if ceil(num_of_songs / 8) < ceil(num_of_songs / 7)
                 else 7 if ceil(num_of_songs / 7) < ceil(num_of_songs / 6) else 6)
        kb = create_inline_kb(width, **btn_nums)  # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å—Ç—Ä–æ–∏—Ç–µ–ª—è –∫–Ω–æ–ø–æ–∫
        await message.answer(song_list + f'\n\n‚ùóÔ∏è –ü–æ–∫–∞–∑–∞–Ω—ã —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 24 –∏–∑ {len(res)} –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–µ—Å–µ–Ω. '
                                f'–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å —Ç–æ—á–Ω–µ–µ. ü§∑‚Äç‚ôÇÔ∏è' if len(res) > 24 else song_list, reply_markup=kb)
        metrics('cnt_by_txt', message.from_user)
        metrics('users', message.from_user)
    except Exception as e:
        logging.exception(e)


# –§—É–Ω–∫—Ü–∏—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ—Å–ª–µ –ø–µ—Å–Ω–∏
def under_song_kb(width: int, in_fvrt: bool, is_audio: bool, is_youtube: bool) -> InlineKeyboardMarkup:
    kb_builder = InlineKeyboardBuilder()
    fvrt_sign = '‚ù§Ô∏è' if in_fvrt else 'ü§ç'
    fvrt_btn = InlineKeyboardButton(text=fvrt_sign, callback_data='favorites')
    chords_btn = InlineKeyboardButton(text='–ê–∫–∫–æ—Ä–¥—ã', callback_data='Chords')
    audio_btn = InlineKeyboardButton(text='–ê—É–¥–∏–æ', callback_data='audio')
    youtube_btn = InlineKeyboardButton(text='YouTube', callback_data='YouTube')
    buttons: list[InlineKeyboardButton] = [fvrt_btn, chords_btn]
    if is_audio:
        buttons.append(audio_btn)
    if is_youtube:
        buttons.append(youtube_btn)
    kb_builder.row(*buttons, width=width)
    return kb_builder.as_markup()


# –§—É–Ω–∫—Ü–∏—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –Ω–æ–º–µ—Ä–∞–º–∏ –ø–µ—Å–µ–Ω –ø–æ—Å–ª–µ —Å–ø–∏—Å–∫–æ–≤
def create_inline_kb(width, *args, back_btn = None, **kwargs) -> InlineKeyboardMarkup:
    kb_builder = InlineKeyboardBuilder()
    buttons: list[InlineKeyboardButton] = []
    if kwargs:
        for btn, txt in kwargs.items():
            buttons.append(InlineKeyboardButton(text=txt, callback_data=btn))
    kb_builder.row(*buttons, width=width)
    if back_btn:
        kb_builder.row(InlineKeyboardButton(text='‚¨ÖÔ∏è –ù –∞ –∑ –∞ –¥', callback_data=back_btn))
    return kb_builder.as_markup()


def get_themes_btns(theme):  # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —Å —Ç–µ–º–∞–º–∏
    # conn = psycopg2.connect(host=host, user=user, password=password, dbname=database)
    # cursor = conn.cursor()
    # if theme == 'main_themes':
    #     cursor.execute("SELECT * FROM main_themes")
    #     main_themes = cursor.fetchall()
    #     themes_btns = {f"&;{m_theme_id};{m_theme}": f"üî∏ {m_theme} üî∏" for m_theme_id, m_theme in main_themes}
    #     print(themes_btns)
    #
    # else:
    #     m_theme_id = int(theme.split(';')[1])
    #     cursor.execute(f"SELECT id, theme FROM themes WHERE main_theme_id = {m_theme_id} ORDER BY id ASC")
    #     themes = cursor.fetchall()
    #     themes_btns = {f"%;{m_theme_id};{id};{theme}": f"üîπ {theme} üîπ" for id, theme in themes}
    # cursor.close()
    # conn.close()

    # –ß—Ç–æ–±—ã –Ω–µ –¥–æ—Å—Ç–∞–≤–∞—Ç—å —Å–ø–∏—Å–∫–∏ —Ç–µ–º –∫–∞–∂–¥—ã–π —Ä–∞–∑, –Ω–∏–∂–µ —Å–¥–µ–ª–∞–Ω—ã —Å–ª–æ–≤–∞—Ä–∏. –û–±–Ω–æ–≤–ª—è—Ç—å –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —Ç–µ–º.
    if theme == 'main_themes':
        themes_btns = {'&;1;–ë–æ–≥': 'üî∏ –ë–æ–≥ üî∏', '&;2;–ò–∏—Å—É—Å –•—Ä–∏—Å—Ç–æ—Å': 'üî∏ –ò–∏—Å—É—Å –•—Ä–∏—Å—Ç–æ—Å üî∏',
                       '&;3;–°–≤—è—Ç–æ–π –î—É—Ö': 'üî∏ –°–≤—è—Ç–æ–π –î—É—Ö üî∏', '&;4;–ï–≤–∞–Ω–≥–µ–ª–∏–µ': 'üî∏ –ï–≤–∞–Ω–≥–µ–ª–∏–µ üî∏',
                       '&;5;–°–ª–æ–≤–æ –ë–æ–∂–∏–µ': 'üî∏ –°–ª–æ–≤–æ –ë–æ–∂–∏–µ üî∏', '&;6;–•—Ä–∏—Å—Ç–∏–∞–Ω—Å–∫–∞—è –∂–∏–∑–Ω—å': 'üî∏ –•—Ä–∏—Å—Ç–∏–∞–Ω—Å–∫–∞—è –∂–∏–∑–Ω—å üî∏',
                       '&;7;–¶–µ—Ä–∫–æ–≤—å': 'üî∏ –¶–µ—Ä–∫–æ–≤—å üî∏', '&;8;–ë—É–¥—É—â–µ–µ': 'üî∏ –ë—É–¥—É—â–µ–µ üî∏'}
    else:
        m_theme_id = int(theme.split(';')[1])
        theme_dict = {
            1: {'%;1;1;–ë–ª–∞–≥–æ–¥–∞—Ç—å –∏ –º–∏–ª–æ—Å—Ç—å –ë–æ–≥–∞': 'üîπ –ë–ª–∞–≥–æ–¥–∞—Ç—å –∏ –º–∏–ª–æ—Å—Ç—å –ë–æ–≥–∞ üîπ',
                '%;1;2;–í–µ—Ä–Ω–æ—Å—Ç—å –∏ –Ω–µ–∏–∑–º–µ–Ω–Ω–æ—Å—Ç—å –ë–æ–≥–∞': 'üîπ –í–µ—Ä–Ω–æ—Å—Ç—å –∏ –Ω–µ–∏–∑–º–µ–Ω–Ω–æ—Å—Ç—å –ë–æ–≥–∞ üîπ',
                '%;1;3;–ó–∞–±–æ—Ç–∞ –ë–æ–≥–∞': 'üîπ –ó–∞–±–æ—Ç–∞ –ë–æ–≥–∞ üîπ', '%;1;4;–ó–∞–º—ã—Å–µ–ª –ë–æ–≥–∞': 'üîπ –ó–∞–º—ã—Å–µ–ª –ë–æ–≥–∞ üîπ',
                '%;1;5;–ö–∞—á–µ—Å—Ç–≤–∞ –ë–æ–≥–∞': 'üîπ –ö–∞—á–µ—Å—Ç–≤–∞ –ë–æ–≥–∞ üîπ', '%;1;6;–õ—é–±–æ–≤—å –ë–æ–≥–∞': 'üîπ –õ—é–±–æ–≤—å –ë–æ–≥–∞ üîπ',
                '%;1;7;–ü—Ä–µ–≤–æ—Å—Ö–æ–¥—Å—Ç–≤–æ –ë–æ–≥–∞': 'üîπ –ü—Ä–µ–≤–æ—Å—Ö–æ–¥—Å—Ç–≤–æ –ë–æ–≥–∞ üîπ', '%;1;8;–°–≤—è—Ç–æ—Å—Ç—å –ë–æ–≥–∞': 'üîπ –°–≤—è—Ç–æ—Å—Ç—å –ë–æ–≥–∞ üîπ',
                '%;1;9;–°–ª–∞–≤–∞ –∏ –≤–µ–ª–∏—á–∏–µ –ë–æ–≥–∞': 'üîπ –°–ª–∞–≤–∞ –∏ –≤–µ–ª–∏—á–∏–µ –ë–æ–≥–∞ üîπ', '%;1;10;–¢–≤–æ—Ä–µ—Ü': 'üîπ –¢–≤–æ—Ä–µ—Ü üîπ',
                '%;1;11;–¢—Ä–æ–∏—Ü–∞': 'üîπ –¢—Ä–æ–∏—Ü–∞ üîπ', '%;1;12;–¶–∞—Ä—Å—Ç–≤–æ –ë–æ–≥–∞': 'üîπ –¶–∞—Ä—Å—Ç–≤–æ –ë–æ–≥–∞ üîπ'},
            2: {'%;2;20;–í–æ—Å–∫—Ä–µ—Å–µ–Ω–∏–µ –•—Ä–∏—Å—Ç–∞': 'üîπ –í–æ—Å–∫—Ä–µ—Å–µ–Ω–∏–µ –•—Ä–∏—Å—Ç–∞ üîπ',
                '%;2;21;–ì–æ—Å–ø–æ–¥—Å—Ç–≤–æ –•—Ä–∏—Å—Ç–∞': 'üîπ –ì–æ—Å–ø–æ–¥—Å—Ç–≤–æ –•—Ä–∏—Å—Ç–∞ üîπ',
                '%;2;22;–ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å–Ω–∞—è –∂–µ—Ä—Ç–≤–∞ –•—Ä–∏—Å—Ç–∞': 'üîπ –ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å–Ω–∞—è –∂–µ—Ä—Ç–≤–∞ –•—Ä–∏—Å—Ç–∞ üîπ',
                '%;2;23;–ö—Ä–µ—Å—Ç –•—Ä–∏—Å—Ç–∞': 'üîπ –ö—Ä–µ—Å—Ç –•—Ä–∏—Å—Ç–∞ üîπ', '%;2;24;–õ—é–±–æ–≤—å –•—Ä–∏—Å—Ç–∞': 'üîπ –õ—é–±–æ–≤—å –•—Ä–∏—Å—Ç–∞ üîπ',
                '%;2;25;–ü–µ—Ä–≤–æ—Å–≤—è—â–µ–Ω—Å—Ç–≤–æ –•—Ä–∏—Å—Ç–∞': 'üîπ –ü–µ—Ä–≤–æ—Å–≤—è—â–µ–Ω—Å—Ç–≤–æ –•—Ä–∏—Å—Ç–∞ üîπ',
                '%;2;26;–ü—Ä–µ–≤–æ—Å—Ö–æ–¥—Å—Ç–≤–æ –•—Ä–∏—Å—Ç–∞': 'üîπ –ü—Ä–µ–≤–æ—Å—Ö–æ–¥—Å—Ç–≤–æ –•—Ä–∏—Å—Ç–∞ üîπ',
                '%;2;27;–†–æ–∂–¥–µ—Å—Ç–≤–æ –•—Ä–∏—Å—Ç–∞': 'üîπ –†–æ–∂–¥–µ—Å—Ç–≤–æ –•—Ä–∏—Å—Ç–∞ üîπ',
                '%;2;28;–°–ª–∞–≤–∞ –∏ –≤–µ–ª–∏—á–∏–µ –•—Ä–∏—Å—Ç–∞': 'üîπ –°–ª–∞–≤–∞ –∏ –≤–µ–ª–∏—á–∏–µ –•—Ä–∏—Å—Ç–∞ üîπ',
                '%;2;29;–°–º–∏—Ä–µ–Ω–∏–µ –•—Ä–∏—Å—Ç–∞': 'üîπ –°–º–∏—Ä–µ–Ω–∏–µ –•—Ä–∏—Å—Ç–∞ üîπ', '%;2;30;–°–ø–∞—Å–∏—Ç–µ–ª—å': 'üîπ –°–ø–∞—Å–∏—Ç–µ–ª—å üîπ',
                '%;2;31;–°—Ç—Ä–∞–¥–∞–Ω–∏—è –•—Ä–∏—Å—Ç–∞': 'üîπ –°—Ç—Ä–∞–¥–∞–Ω–∏—è –•—Ä–∏—Å—Ç–∞ üîπ',
                '%;2;32;–•–æ–¥–∞—Ç–∞–π—Å—Ç–≤–æ –•—Ä–∏—Å—Ç–∞': 'üîπ –•–æ–¥–∞—Ç–∞–π—Å—Ç–≤–æ –•—Ä–∏—Å—Ç–∞ üîπ', '%;2;33;–•—Ä–∏—Å—Ç–æ—Å ‚Äì –ø—É—Ç—å': 'üîπ –•—Ä–∏—Å—Ç–æ—Å ‚Äì –ø—É—Ç—å üîπ',
                '%;2;34;–¶–∞—Ä—Å—Ç–≤–æ –•—Ä–∏—Å—Ç–∞': 'üîπ –¶–∞—Ä—Å—Ç–≤–æ –•—Ä–∏—Å—Ç–∞ üîπ'},
            3: {'%;3;35;–û–∑–∞—Ä–µ–Ω–∏–µ –°–≤—è—Ç–æ–≥–æ –î—É—Ö–∞': 'üîπ –û–∑–∞—Ä–µ–Ω–∏–µ –°–≤—è—Ç–æ–≥–æ –î—É—Ö–∞ üîπ',
                '%;3;36;–ü—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –°–≤—è—Ç–æ–≥–æ –î—É—Ö–∞': 'üîπ –ü—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –°–≤—è—Ç–æ–≥–æ –î—É—Ö–∞ üîπ',
                '%;3;37;–°–≤—è—Ç–æ–π –î—É—Ö': 'üîπ –°–≤—è—Ç–æ–π –î—É—Ö üîπ'},
            4: {'%;4;15;–ò—Å–∫—É–ø–ª–µ–Ω–∏–µ': 'üîπ –ò—Å–∫—É–ø–ª–µ–Ω–∏–µ üîπ', '%;4;16;–û–ø—Ä–∞–≤–¥–∞–Ω–∏–µ': 'üîπ –û–ø—Ä–∞–≤–¥–∞–Ω–∏–µ üîπ',
                '%;4;17;–ü—Ä–æ—â–µ–Ω–∏–µ': 'üîπ –ü—Ä–æ—â–µ–Ω–∏–µ üîπ', '%;4;18;–°–ø–∞—Å–µ–Ω–∏–µ': 'üîπ –°–ø–∞—Å–µ–Ω–∏–µ üîπ',
                '%;4;19;–£—Å—ã–Ω–æ–≤–ª–µ–Ω–∏–µ': 'üîπ –£—Å—ã–Ω–æ–≤–ª–µ–Ω–∏–µ üîπ'},
            5: {'%;5;38;–°–ª–æ–≤–æ –ë–æ–∂–∏–µ': 'üîπ –°–ª–æ–≤–æ –ë–æ–∂–∏–µ üîπ'},
            6: {'%;6;39;–ë–ª–∞–≥–æ–≤–µ—Å—Ç–∏–µ': 'üîπ –ë–ª–∞–≥–æ–≤–µ—Å—Ç–∏–µ üîπ', '%;6;40;–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –ë–æ–≥—É': 'üîπ –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –ë–æ–≥—É üîπ',
                '%;6;41;–í–µ—Ä–∞': 'üîπ –í–µ—Ä–∞ üîπ', '%;6;42;–ì—Ä–µ—Ö, –±–æ—Ä—å–±–∞ —Å –≥—Ä–µ—Ö–æ–º': 'üîπ –ì—Ä–µ—Ö, –±–æ—Ä—å–±–∞ —Å –≥—Ä–µ—Ö–æ–º üîπ',
                '%;6;43;–î—É—Ö–æ–≤–Ω–∞—è –≤–æ–π–Ω–∞': 'üîπ –î—É—Ö–æ–≤–Ω–∞—è –≤–æ–π–Ω–∞ üîπ', '%;6;44;–ñ–∞–∂–¥–∞ –ø–æ –ë–æ–≥—É': 'üîπ –ñ–∞–∂–¥–∞ –ø–æ –ë–æ–≥—É üîπ',
                '%;6;45;–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –ë–æ–≥–∞': 'üîπ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –ë–æ–≥–∞ üîπ',
                '%;6;46;–ò—Å–ø—ã—Ç–∞–Ω–∏—è –∏ —Å–∫–æ—Ä–±–∏': 'üîπ –ò—Å–ø—ã—Ç–∞–Ω–∏—è –∏ —Å–∫–æ—Ä–±–∏ üîπ', '%;6;47;–õ—é–±–æ–≤—å –∫ –ë–æ–≥—É': 'üîπ –õ—é–±–æ–≤—å –∫ –ë–æ–≥—É üîπ',
                '%;6;48;–ú–∏—Ä –∏ –ø–æ–∫–æ–π –≤ –ë–æ–≥–µ': 'üîπ –ú–∏—Ä –∏ –ø–æ–∫–æ–π –≤ –ë–æ–≥–µ üîπ', '%;6;49;–ú–æ–ª–∏—Ç–≤–∞': 'üîπ –ú–æ–ª–∏—Ç–≤–∞ üîπ',
                '%;6;50;–ù–∞–¥–µ–∂–¥–∞ –∏ —É–ø–æ–≤–∞–Ω–∏–µ –Ω–∞ –ë–æ–≥–∞': 'üîπ –ù–∞–¥–µ–∂–¥–∞ –∏ —É–ø–æ–≤–∞–Ω–∏–µ –Ω–∞ –ë–æ–≥–∞ üîπ',
                '%;6;51;–û—Å–≤—è—â–µ–Ω–∏–µ': 'üîπ –û—Å–≤—è—â–µ–Ω–∏–µ üîπ', '%;6;52;–ü–æ–∑–Ω–∞–Ω–∏–µ –ë–æ–≥–∞': 'üîπ –ü–æ–∑–Ω–∞–Ω–∏–µ –ë–æ–≥–∞ üîπ',
                '%;6;53;–ü–æ–∫–∞—è–Ω–∏–µ –∏ –∏—Å–ø–æ–≤–µ–¥–∞–Ω–∏–µ': 'üîπ –ü–æ–∫–∞—è–Ω–∏–µ –∏ –∏—Å–ø–æ–≤–µ–¥–∞–Ω–∏–µ üîπ',
                '%;6;54;–ü–æ—Å–≤—è—â—ë–Ω–Ω–æ—Å—Ç—å –∏ —Å–ª—É–∂–µ–Ω–∏–µ –ë–æ–≥—É': 'üîπ –ü–æ—Å–≤—è—â—ë–Ω–Ω–æ—Å—Ç—å –∏ —Å–ª—É–∂–µ–Ω–∏–µ –ë–æ–≥—É üîπ',
                '%;6;55;–ü—Ä–æ—Å–ª–∞–≤–ª–µ–Ω–∏–µ –ë–æ–≥–∞': 'üîπ –ü—Ä–æ—Å–ª–∞–≤–ª–µ–Ω–∏–µ –ë–æ–≥–∞ üîπ',
                '%;6;56;–†–∞–¥–æ—Å—Ç—å –∏ —Å—á–∞—Å—Ç—å–µ –≤ –ë–æ–≥–µ': 'üîπ –†–∞–¥–æ—Å—Ç—å –∏ —Å—á–∞—Å—Ç—å–µ –≤ –ë–æ–≥–µ üîπ', '%;6;57;–°–º–∏—Ä–µ–Ω–∏–µ': 'üîπ –°–º–∏—Ä–µ–Ω–∏–µ üîπ',
                '%;6;58;–°—Ç–æ–π–∫–æ—Å—Ç—å –≤–µ—Ä—É—é—â–∏—Ö': 'üîπ –°—Ç–æ–π–∫–æ—Å—Ç—å –≤–µ—Ä—É—é—â–∏—Ö üîπ', '%;6;59;–°—É–µ—Ç–Ω–æ—Å—Ç—å –º–∏—Ä–∞': 'üîπ –°—É–µ—Ç–Ω–æ—Å—Ç—å –º–∏—Ä–∞ üîπ'},
            7: {'%;7;60;–ï–¥–∏–Ω—Å—Ç–≤–æ –≤–µ—Ä—É—é—â–∏—Ö': 'üîπ –ï–¥–∏–Ω—Å—Ç–≤–æ –≤–µ—Ä—É—é—â–∏—Ö üîπ', '%;7;61;–ü—Ä–∏—á–∞—Å—Ç–∏–µ': 'üîπ –ü—Ä–∏—á–∞—Å—Ç–∏–µ üîπ',
                '%;7;62;–¶–µ—Ä–∫–æ–≤—å': 'üîπ –¶–µ—Ä–∫–æ–≤—å üîπ'},
            8: {'%;8;13;–í—Ç–æ—Ä–æ–µ –ø—Ä–∏—à–µ—Å—Ç–≤–∏–µ –•—Ä–∏—Å—Ç–∞': 'üîπ –í—Ç–æ—Ä–æ–µ –ø—Ä–∏—à–µ—Å—Ç–≤–∏–µ –•—Ä–∏—Å—Ç–∞ üîπ', '%;8;14;–ù–µ–±–µ—Å–∞': 'üîπ –ù–µ–±–µ—Å–∞ üîπ'}
                      }
        themes_btns = theme_dict[m_theme_id]
    return themes_btns


def metrics(act, user_info):  # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
    try:
        user_id, f_name, l_name, username, lang = (user_info.id, user_info.first_name, user_info.last_name,
                                                   user_info.username, user_info.language_code)
        current_date = datetime.date.today()  # .isoformat()
        conn = psycopg2.connect(host=host, user=user, password=password, dbname=database)
        cursor = conn.cursor()
        if act == 'users':  # –ó–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ç–∞–±–ª–∏—Ü—É users
            cursor.execute(f"INSERT INTO users (telgrm_user_id, f_name, l_name, username, lang) VALUES ({user_id}, "
                           f"'{f_name}', '{l_name}', '{username}', '{lang}') ON CONFLICT (telgrm_user_id) DO UPDATE "
                        f"SET u_cnt_msg = users.u_cnt_msg + 1, last_access = current_timestamp(0) + INTERVAL '1 hours'")
        else:  # –ó–∞–ø–∏—Å—å –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –≤ —Ç–∞–±–ª–∏—Ü—É metrics
            cursor.execute(f"SELECT p.id, m.id_period FROM periods p LEFT JOIN metrics m ON p.id = m.id_period "
                           f"WHERE current_date BETWEEN p.dt_beg and p.dt_end")
            id_period = cursor.fetchone()
            if not id_period[1]:  # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –≤ metrics –µ—â—ë –Ω–µ—Ç, —Ç–æ...
                id_prev_period = str(datetime.date(current_date.year, current_date.month - 1, 1))[:7] \
                    if current_date.month > 1 else str(datetime.date(current_date.year - 1, 12, 1))[:7]
                cursor.execute(f"UPDATE metrics SET cnt_by_users = (SELECT COUNT(u.*) FROM users u JOIN periods p "
                               f"ON p.id = '{id_prev_period}' WHERE u.last_access BETWEEN p.dt_beg AND p.dt_end) "
                               f"WHERE id_period = '{id_prev_period}'")  # –ó–∞–ø–∏—Å—å –∫–æ–ª-–≤–∞ —é–∑–µ—Ä–æ–≤ –≤ –ø—Ä–æ—à–ª–æ–º –º–µ—Å—è—Ü–µ –≤ metrics
                cursor.execute(f"INSERT INTO metrics (id_period) VALUES ('{id_period[0]}')")  # –ó–∞–ø–∏—Å—å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ metrics
            if act == 'cnt_by_content':  # –°—á—ë—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è
                cursor.execute(f"UPDATE metrics SET cnt_by_content=cnt_by_content+1 WHERE id_period = '{id_period[0]}'")
            elif act == 'cnt_by_nums':  # –°—á—ë—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–æ–º–µ—Ä–∞–º
                cursor.execute(f"UPDATE metrics SET cnt_by_nums = cnt_by_nums + 1 WHERE id_period = '{id_period[0]}'")
            elif act == 'cnt_by_txt':  # –°—á—ë—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –ø–æ —Ñ—Ä–∞–∑–µ
                cursor.execute(f"UPDATE metrics SET cnt_by_txt = cnt_by_txt + 1 WHERE id_period = '{id_period[0]}'")
            elif act == 'cnt_by_chords':  # –°—á—ë—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è "–ê–∫–∫–æ—Ä–¥—ã"
                cursor.execute(f"UPDATE metrics SET cnt_by_chords = cnt_by_chords+1 WHERE id_period = '{id_period[0]}'")
                cursor.execute(f"UPDATE users SET u_cnt_chords = u_cnt_chords + 1, "
                            f"last_access = current_timestamp(0) + INTERVAL '1 hours' WHERE telgrm_user_id = {user_id}")
            elif act == 'cnt_by_singers':  # –°—á—ë—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º
                cursor.execute(f"UPDATE metrics SET cnt_by_singers=cnt_by_singers+1 WHERE id_period='{id_period[0]}'")
            elif act == 'cnt_by_themes':  # –°—á—ë—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–µ–º–∞–º
                cursor.execute(f"UPDATE metrics SET cnt_by_themes = cnt_by_themes+1 WHERE id_period = '{id_period[0]}'")
            elif act == 'cnt_by_fvrt':  # –°—á—ë—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–µ–º–∞–º
                cursor.execute(f"UPDATE metrics SET cnt_by_fvrt = cnt_by_fvrt + 1 WHERE id_period = '{id_period[0]}'")
        conn.commit()
        cursor.close()
        conn.close()
    except Exception as e:
        logging.exception(e)


if __name__ == '__main__':  # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    try:
        dp.run_polling(bot)
    except Exception as e:
        logging.exception(e)